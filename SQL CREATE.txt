//SQL CREATE STATEMENTS FOR ALL TABLES

CREATE TABLE ACCOUNT_HOLDER(Library_Card_Number VARCHAR(15) NOT NULL, Active_or_Inactive INT NOT NULL, Fname VARCHAR(15) NOT NULL, Lname VARCHAR(15) NOT NULL, Password VARCHAR(15) NOT NULL, Sex CHAR(1) NOT NULL, Birth_Date DATE NOT NULL, Balance INT, Address VARCHAR(50) NOT NULL, L_ID VARCHAR(15) NOT NULL, A_PersonID VARCHAR(15) NOT NULL, CHECK(Active_or_Inactive=1 OR Active_or_Inactive=0), CHECK(Sex='M' OR Sex='F'), CHECK(Balance>=0)PRIMARY KEY(Library_Card_Number), CHECK(Birth_Date<=2018), FOREIGN KEY(L_ID) REFERENCES EMPLOYEE(Employee_ID) FOREIGN KEY (A_PersonID) REFERENCES PERSON(Person_ID));

CREATE TABLE DISTRIBUTOR(Distributor_Name VARCHAR(20) NOT NULL, CEO VARCHAR(20) NOT NULL, PRIMARY KEY(Distributor_Name));

CREATE TABLE CREATOR(Creator_Name VARCHAR(15) NOT NULL, Start_Year INT, Artist_Flag INT NOT NULL, Actor_Flag INT NOT NULL, CHECK(Start_Year<=2018), CHECK(Artist_Flag=1 OR Artist_Flag=0), CHECK(Actor_Flag=1 OR Actor_Flag=0), PRIMARY KEY(Creator_Name));

CREATE TABLE MEDIA_INVENTORY (LOCCN VARCHAR(15) NOT NULL, Title VARCHAR(25) NOT NULL, Release_Year INT NOT NULL, Physical_or_Digital INT NOT NULL DEFAULT 2, Copies_Available INT NOT NULL, Copies_Checked_Out INT NOT NULL, M_Distributor_Name VARCHAR(15) NOT NULL, Genres VARCHAR(15), Rating_Name DECIMAL(2,1) NOT NULL, CHECK(Release_Year<=2018), CHECK(Physical_or_Digital=1 OR Physical_or_Digital=0), CHECK(Copies_Available>=0), CHECK(Copies_Checked_Out>=0), PRIMARY KEY(LOCCN), FOREIGN KEY(M_Distributor_Name) REFERENCES DISTRIBUTOR(Distributor_Name));

CREATE TABLE ACTOR(A_Creator_Name VARCHAR(15) NOT NULL, Date_Of_Birth DATE NOT NULL, Sex CHAR(1) NOT NULL, CHECK(Date_Of_Birth<=2018), CHECK(Sex='M' OR Sex='F'), PRIMARY KEY(A_Creator_Name), FOREIGN KEY(A_Creator_Name) REFERENCES CREATOR(Creator_Name)) ;

CREATE TABLE ARTIST(Artist_ID VARCHAR(15) NOT NULL, AR_Creator_Name VARCHAR(15) NOT NULL, PRIMARY KEY(Artist_ID), FOREIGN KEY (AR_Creator_Name) REFERENCES CREATOR(Creator_Name));

CREATE TABLE SOLOIST(S_Artist_ID VARCHAR(15) NOT NULL, Birth_Date DATE NOT NULL, Instrument VARCHAR(20) NOT NULL, Sex CHAR(1) NOT NULL, S_Creator_Name VARCHAR(30) NOT NULL, CHECK(Birth_Date<=2018), CHECK(Sex='M' OR Sex='F'), PRIMARY KEY(S_Artist_ID), FOREIGN KEY(S_Artist_ID) REFERENCES ARTIST(Artist_ID), FOREIGN KEY(S_Creator_Name) REFERENCES CREATOR(Creator_Name)) ;

CREATE TABLE ENSEMBLE(E_Artist_ID VARCHAR(15) NOT NULL, Number_of_Members INT NOT NULL, E_Creator_Name VARCHAR(15) NOT NULL, CHECK(Number_of_Members>=1), PRIMARY KEY(E_Artist_ID), FOREIGN KEY(E_Artist_ID) REFERENCES ARTIST(Artist_ID), FOREIGN KEY(E_Creator_Name) REFERENCES CREATOR(Creator_Name));

CREATE TABLE MOVIE(M_LOCCN VARCHAR(15) NOT NULL, Director VARCHAR(15) NOT NULL, Length INT NOT NULL, CHECK(Length>0), PRIMARY KEY(M_LOCCN), FOREIGN KEY(M_LOCCN) REFERENCES MEDIA_INVENTORY(LOCCN));

CREATE TABLE ALBUM(A_LOCCN VARCHAR(15) NOT NULL, Number_of_Tracks INT NOT NULL, CHECK(Number_of_Tracks>0), PRIMARY KEY(A_LOCCN), FOREIGN KEY(A_LOCCN) REFERENCES MEDIA_INVENTORY(LOCCN));

CREATE TABLE TRACK(T_LOCCN VARCHAR(15) NOT NULL, A_LOCCN VARCHAR(15) NOT NULL, Length INT NOT NULL, Number_of_Artists INT NOT NULL, File_Size INT NOT_NULL, CHECK(Length>0), CHECK(Number_of_Artists>0), CHECK(File_Size>0), PRIMARY KEY(T_LOCCN), FOREIGN KEY(T_LOCCN) REFERENCES MEDIA_INVENTORY(LOCCN), FOREIGN KEY(A_LOCCN) REFERENCES Album(A_LOCCN));

CREATE TABLE SOLOIST_ENSEMBLE(Artist_ID_Soloist VARCHAR(20) NOT NULL, Artist_ID_Ensemble VARCHAR(20) NOT NULL, PRIMARY KEY(Artist_ID_Soloist, Artist_ID_Ensemble), FOREIGN KEY(Artist_ID_Soloist) REFERENCES SOLOIST(S_Artist_ID), FOREIGN KEY(Artist_ID_Ensemble) REFERENCES ENSEMBLE(E_Artist_ID));

CREATE TABLE MOVIE_ALBUM(M_LOCCN VARCHAR(20) NOT NULL, A_LOCCN VARCHAR(20) NOT NULL, PRIMARY KEY(M_LOCCN, A_LOCCN), FOREIGN KEY(M_LOCCN) REFERENCES MOVIE(M_LOCCN), FOREIGN KEY(A_LOCCN) REFERENCES ALBUM(A_LOCCN));

CREATE TABLE ARTIST_ALBUM(A_ID_Artist VARCHAR(20) NOT NULL, AL_LOCCN VARCHAR(20) NOT NULL, PRIMARY KEY(A_ID_Artist, AL_LOCCN), FOREIGN KEY (AL_LOCCN) REFERENCES ALBUM(A_LOCCN), FOREIGN KEY (A_ID_Artist) REFERENCES ARTIST(Artist_ID));

CREATE TABLE ARTIST_TRACK(A_ID_Artist VARCHAR(20) NOT NULL, T_LOCCN VARCHAR(20) NOT NULL, FOREIGN KEY (A_ID_Artist) REFERENCES ARTIST(Artist_ID), PRIMARY KEY(A_ID_Artist, T_LOCCN), FOREIGN KEY(T_LOCCN) REFERENCES TRACK(T_LOCCN), FOREIGN KEY(A_ID_Artist) REFERENCES ARTIST(Artist_ID));

CREATE TABLE MEDIA_RESERVED_BY_ACCOUNT_HOLDER(LOCCN_Item VARCHAR(15) NOT NULL, Library_Card_Number VARCHAR(15) NOT NULL, Reservation_Date DATE NOT NULL, Status VARCHAR(10) NOT NULL, CHECK(Reservation_Date<=2018), CHECK(Status='AVA' OR Status='INAVA'), PRIMARY KEY(LOCCN_Item, Library_Card_Number, Reservation_Date),FOREIGN KEY(LOCCN_Item) REFERENCES MEDIA_INVENTORY(LOCCN), FOREIGN KEY(Library_Card_Number) REFERENCES ACCOUNT_HOLDER(Library_Card_Number));

CREATE TABLE PERSON(Person_ID VARCHAR(15) NOT NULL, PRIMARY KEY(Person_ID));

CREATE TABLE EMPLOYEE(Employee_ID VARCHAR(15) NOT NULL, Fname VARCHAR(15) NOT NULL, Lname VARCHAR(15) NOT NULL, Salary INT NOT NULL, Hiring_Year INT NOT NULL, Birth_Date DATE NOT NULL, Address VARCHAR(50) NOT NULL, E_Person_ID VARCHAR(15) NOT NULL, CHECK(Salary>0), CHECK(Hiring_Year<=2018), CHECK(Birth_Date<=2018), PRIMARY KEY(Employee_ID), FOREIGN KEY (E_Person_ID) REFERENCES PERSON(Person_ID));

CREATE TABLE BRANCH_MANAGER(Branch_Manager_ID VARCHAR(15) NOT NULL,PRIMARY KEY(Branch_Manager_ID), FOREIGN KEY(Branch_Manager_ID) REFERENCES EMPLOYEE(Employee_ID));

CREATE TABLE LIBRARIAN(Librarian_ID VARCHAR(15) NOT NULL, Specialty VARCHAR(15) NOT NULL, L_Branch_Manager_ID VARCHAR(15) NOT NULL, PRIMARY KEY(Librarian_ID), FOREIGN KEY(Librarian_ID) REFERENCES EMPLOYEE(Employee_ID), FOREIGN KEY(L_Branch_Manager_ID) REFERENCES BRANCH_MANAGER(Branch_Manager_ID));

CREATE TABLE CHECKOUT_INSTANCE(LOCCN_Item VARCHAR(15) NOT NULL, Library_Card_Number VARCHAR(15) NOT NULL, Checkout_Date TIMESTAMP NOT NULL, Due_Date TIMESTAMP NOT NULL,Return_Date TIMESTAMP,Media_Type VARCHAR(15) NOT NULL, CHECK(Checkout_Date<=2018), CHECK(Due_Date<=Checkout_Date), CHECK(Return_Date>Checkout_Date), PRIMARY KEY(LOCCN_Item, Library_Card_Number, Checkout_Date),FOREIGN KEY(LOCCN_Item) REFERENCES MEDIA_INVENTORY(LOCCN), FOREIGN KEY(Library_Card_Number) REFERENCES ACCOUNT_HOLDER(Library_Card_Number));

CREATE TABLE EMPLOYEEID_SSN(Emp_ID VARCHAR(15) NOT NULL, SSN CHAR(9) NOT NULL, PRIMARY KEY(Emp_ID), FOREIGN KEY(EMP_ID) REFERENCES EMPLOYEE(Employee_ID));

CREATE TABLE EMPLOYEE_EMAIL(Emp_ID VARCHAR(15) NOT NULL, Email VARCHAR(30) NOT NULL, PRIMARY KEY(Emp_ID), FOREIGN KEY(Emp_ID) REFERENCES EMPLOYEE(Employee_ID));

CREATE TABLE ACCOUNT_HOLDER_EMAIL(Library_Card_Number VARCHAR(15) NOT NULL, Email VARCHAR(30) NOT NULL, PRIMARY KEY(Library_Card_Number), FOREIGN KEY(Library_Card_Number) REFERENCES ACCOUNT_HOLDER(Library_Card_Number));

CREATE TABLE ACTOR_MOVIE(C_N_Actor VARCHAR (30) NOT NULL, M_LOCCN VARCHAR(15) NOT NULL, PRIMARY KEY(C_N_Actor, M_LOCCN), FOREIGN KEY(C_N_Actor) REFERENCES ACTOR(A_Creator_Name), FOREIGN KEY(M_LOCCN) REFERENCES MOVIE(M_LOCCN));


//SQL STATEMENTS FOR ALL INDEXES IMPLEMENTED



//SQL VIEW STATEMENTS FOR ALL VIEWS IMPLEMENTED

CREATE VIEW HIGHEST_AVG_SALARY_BY_SPECIALTY
AS SELECT specialty, AVG(salary)
   FROM LIBRARIAN, EMPLOYEE
   WHERE Librarian_ID = Employee_ID
   GROUP BY specialty
   
CREATE VIEW MOST_POPULAR_DIRECTOR
AS SELECT Director, COUNT(*)
    FROM CHECKOUT_INSTANCE, MOVIE
    WHERE LOCCN_ITEM = M_LOCCN
    GROUP BY Director;

/*SQL Indexing Code */

CREATE INDEX R_YEAR_INDEX ON MEDIA_INVENTORY(R_YEAR);
 
CREATE INDEX SALARY_INDEX ON SALARY(SALARY);
 
CREATE INDEX RESERVATION_MONTH_INDEX ON MEDIA_RESERVED_BY_ACCOUNT_HOLDER(RESERVATION_MONTH);
 
CREATE INDEX ACCOUNT_HOLDER_INDEX ON ACCOUNT_HOLDER(BALANCE);
 
CREATE INDEX ACTOR_INDEX ON ACTOR(DATE_OF_BIRTH);
 
CREATE INDEX CREATOR_INDEX ON CREATOR(START_YEAR);
